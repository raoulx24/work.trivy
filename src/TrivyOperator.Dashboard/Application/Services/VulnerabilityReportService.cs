using TrivyOperator.Dashboard.Application.Models;
using TrivyOperator.Dashboard.Application.Services.Abstractions;
using TrivyOperator.Dashboard.Domain.Trivy;
using TrivyOperator.Dashboard.Domain.Trivy.VulnerabilityReport;
using TrivyOperator.Dashboard.Infrastructure.Abstractions;

namespace TrivyOperator.Dashboard.Application.Services;

public class VulnerabilityReportService(IConcurrentCache<string, IList<VulnerabilityReportCr>> cache)
    : IVulnerabilityReportService
{
    public Task<IList<VulnerabilityReportDto>> GetVulnerabilityReportDtos(string? namespaceName = null)
    {
        List<VulnerabilityReportDto> result = cache
            .Where(kvp => string.IsNullOrEmpty(namespaceName) || kvp.Key == namespaceName)
            .SelectMany(kvp => kvp.Value)
            .Select(vr => vr.ToVulnerabilityReportDto())
            .ToList();

        return Task.FromResult<IList<VulnerabilityReportDto>>(result);
    }

    public Task<VulnerabilityReportDto?> GetVulnerabilityReportDtoByUid(Guid uid)
    {
        foreach (string namespaceName in cache.Keys)
        {
            if (cache.TryGetValue(namespaceName, out IList<VulnerabilityReportCr>? vulnerabilityReportCrs))
            {
                VulnerabilityReportCr? vulnerabilityReportCr =
                    vulnerabilityReportCrs.FirstOrDefault(x => x.Metadata.Uid == uid.ToString());

                if (vulnerabilityReportCr is not null)
                {
                    return Task.FromResult<VulnerabilityReportDto?>(vulnerabilityReportCr.ToVulnerabilityReportDto());
                }
            }
        }

        return Task.FromResult<VulnerabilityReportDto?>(null);
    }

    public Task<IList<VulnerabilityReportDenormalizedDto>> GetVulnerabilityReportDenormalizedDtos(
        string? namespaceName = null)
    {
        List<VulnerabilityReportDenormalizedDto> result = cache
            .Where(kvp => string.IsNullOrEmpty(namespaceName) || kvp.Key == namespaceName)
            .SelectMany(kvp => kvp.Value)
            .SelectMany(vr => vr.ToVulnerabilityReportDenormalizedDtos())
            .ToList();

        return Task.FromResult<IList<VulnerabilityReportDenormalizedDto>>(result);
    }

    public Task<IEnumerable<string>> GetActiveNamespaces() =>
        Task.FromResult(cache.Where(x => x.Value.Any()).Select(x => x.Key));

    public Task<IEnumerable<VulnerabilityReportImageDto>> GetVulnerabilityReportImageDtos(
        string? namespaceName = null,
        IEnumerable<int>? excludedSeverities = null)
    {
        excludedSeverities ??= [];
        int[] excludedSeveritiesArray = excludedSeverities.ToArray();
        int[] incudedSeverities = ((int[])Enum.GetValues(typeof(TrivySeverity))).ToList()
            .Except(excludedSeveritiesArray)
            .ToArray();

        IEnumerable<VulnerabilityReportImageDto> vulnerabilityReportImageDtos = cache
            .Where(kvp => string.IsNullOrEmpty(namespaceName) || kvp.Key == namespaceName)
            .SelectMany(
                kvp => kvp.Value.GroupBy(vr => vr.Report?.Artifact?.Digest)
                    .Select(group => group.ToVulnerabilityReportImageDto())
                    .Select(
                        vrDto =>
                        {
                            vrDto.Details = vrDto.Details.Join(
                                    incudedSeverities,
                                    vulnerability => vulnerability.SeverityId,
                                    id => id,
                                    (vulnerability, _) => vulnerability)
                                .ToArray();
                            return vrDto;
                        })
                    .Where(vrDto => !excludedSeveritiesArray.Any() || vrDto.Details.Length != 0));

        return Task.FromResult(vulnerabilityReportImageDtos);
    }

    public async Task<VulnerabilityReportSumaryDto> GetVulnerabilityReportSummaryDtos() => new()
    {
        SeveritiesByNsSummaryDtos = await GetSeveritiesByNsSummaryDtos(),
        ImagesByNSSummaryDtos = await GetImagesByNSSummaryDtos(),
        ImagesSummaryDtos = await GetImageSummaryDtos(),
        ImageOSesByNSSummaryDtos = await GetImageOSByNSSummaryDtos(),
        ImageOSSummaryDtos = await GetImageOSSummaryDtos(),
        ImageEOSLByNsSummaryDtos = await GetImageEOSLByNsSummaryDtos(),
        ImageEOSLSummaryDtos = await GetImageEOSLSummaryDtos(),
    };

    private Task<IEnumerable<VRSeveritiesByNsSummaryDto>> GetSeveritiesByNsSummaryDtos()
    {
        List<VRSeveritiesByNsSummaryDto> vulnerabilityReportSummaryDtos;
        List<VRSeveritiesByNsSummaryDetailDto> detailDtos;
        VRSeveritiesByNsSummaryDto vulnerabilityReportSummaryDto;
        int[] severityIds = Enum.GetValues(typeof(TrivySeverity)).Cast<int>().ToArray();
        vulnerabilityReportSummaryDtos = cache.Where(kvp => kvp.Value.Any())
            .SelectMany(
                kvp => kvp.Value.SelectMany(
                    vr => (vr.Report?.Vulnerabilities ?? []).Select(
                        vrd => new
                        {
                            vr.Metadata.NamespaceProperty,
                            vrd.Severity,
                            vrd.VulnerabilityId,
                            isFixable = !string.IsNullOrWhiteSpace(vrd.FixedVersion),
                        })))
            .GroupBy(item => new { item.NamespaceProperty, item.Severity })
            .Select(
                group => new
                {
                    namespaceName = group.Key.NamespaceProperty,
                    trivySeverityId = group.Key.Severity,
                    totalCount = group.Count(),
                    distinctCount = group.Select(item => item.VulnerabilityId).Distinct().Count(),
                    fixableTotalCount = group.Where(item => item.isFixable).Count(),
                    fixableDistinctCount =
                        group.Where(item => item.isFixable).Select(item => item.VulnerabilityId).Distinct().Count(),
                })
            .GroupBy(x => x.namespaceName)
            .SelectMany(
                g => severityIds.Select(
                    SeverityId => new
                    {
                        NamespaceName = g.Key,
                        SeverityId,
                        TotalCount = g.FirstOrDefault(x => (int)x.trivySeverityId == SeverityId)?.totalCount ?? 0,
                        DistinctCount = g.FirstOrDefault(x => (int)x.trivySeverityId == SeverityId)?.distinctCount ?? 0,
                        FixableTotalCount =
                            g.FirstOrDefault(x => (int)x.trivySeverityId == SeverityId)?.fixableTotalCount ?? 0,
                        FixableDistinctCount =
                            g.FirstOrDefault(x => (int)x.trivySeverityId == SeverityId)?.fixableDistinctCount ?? 0,
                    }))
            .GroupBy(last => last.NamespaceName)
            .Select(
                summaryGroup =>
                {
                    VRSeveritiesByNsSummaryDto vrsns = new()
                    {
                        Uid = Guid.NewGuid(),
                        NamespaceName = summaryGroup.Key,
                        Details = summaryGroup.Select(
                                detail =>
                                {
                                    VRSeveritiesByNsSummaryDetailDto detailDto = new()
                                    {
                                        Id = detail.SeverityId,
                                        TotalCount = detail.TotalCount,
                                        DistinctCount = detail.DistinctCount,
                                        FixableTotalCount = detail.FixableTotalCount,
                                        FixableDistinctCount = detail.FixableDistinctCount,
                                    };
                                    return detailDto;
                                })
                            .ToList(),
                        IsTotal = false,
                    };
                    return vrsns;
                })
            .ToList();
        IEnumerable<VRSeveritiesByNsSummaryDetailDto> totalSumary = cache.Where(kvp => kvp.Value.Any())
            .SelectMany(
                kvp => kvp.Value.SelectMany(
                    vr => (vr.Report?.Vulnerabilities ?? []).Select(
                        vrd => new
                        {
                            vrd.Severity,
                            vrd.VulnerabilityId,
                            isFixable = !string.IsNullOrWhiteSpace(vrd.FixedVersion),
                        })))
            .GroupBy(item => item.Severity)
            .Select(
                group => new VRSeveritiesByNsSummaryDetailDto
                {
                    Id = (int)group.Key,
                    TotalCount = group.Count(),
                    DistinctCount = group.Select(item => item.VulnerabilityId).Distinct().Count(),
                    FixableTotalCount = group.Where(item => item.isFixable).Count(),
                    FixableDistinctCount = group.Where(item => item.isFixable)
                        .Select(item => item.VulnerabilityId)
                        .Distinct()
                        .Count(),
                })
            .ToArray();
        detailDtos = totalSumary.Concat(
                severityIds.Where(id => !totalSumary.Any(x => x.Id == id))
                    .Select(
                        id => new VRSeveritiesByNsSummaryDetailDto
                        {
                            Id = id,
                            TotalCount = 0,
                            DistinctCount = 0,
                            FixableTotalCount = 0,
                            FixableDistinctCount = 0,
                        }))
            .ToList();
        vulnerabilityReportSummaryDto = new VRSeveritiesByNsSummaryDto
        {
            Uid = Guid.NewGuid(),
            NamespaceName = string.Empty,
            Details = detailDtos,
            IsTotal = true,
        };
        vulnerabilityReportSummaryDtos.Add(vulnerabilityReportSummaryDto);

        return Task.FromResult<IEnumerable<VRSeveritiesByNsSummaryDto>>(
            [.. vulnerabilityReportSummaryDtos.OrderBy(x => x.NamespaceName)]);
    }

    private Task<IEnumerable<GenericByNsSummaryDto>> GetImagesByNSSummaryDtos()
    {
        List<GenericByNsSummaryDto> imagesByNSSummaryDtos = cache.Where(kvp => kvp.Value.Any())
            .SelectMany(
                kvp => kvp.Value.Select(
                    vr => new { NamespaceProperty = kvp.Key, Digest = vr.Report?.Artifact?.Digest ?? string.Empty }))
            .GroupBy(item => item.NamespaceProperty)
            .Select(
                group =>
                {
                    GenericByNsSummaryDto dto = new()
                    {
                        NamespaceName = group.Key,
                        TotalCount = group.Count(),
                        DistinctCount = group.Distinct().Count(),
                    };
                    return dto;
                })
            .ToList();
        IEnumerable<string> globalStatistics = cache.Where(kvp => kvp.Value.Any())
            .SelectMany(kvp => kvp.Value.Select(vr => vr.Report?.Artifact?.Digest ?? string.Empty))
            .ToArray();
        GenericByNsSummaryDto totalDto = new()
        {
            NamespaceName = string.Empty,
            TotalCount = globalStatistics.Count(),
            DistinctCount = globalStatistics.Distinct().Count(),
            IsTotal = true,
        };
        imagesByNSSummaryDtos.Add(totalDto);

        return Task.FromResult<IEnumerable<GenericByNsSummaryDto>>(
            [.. imagesByNSSummaryDtos.OrderBy(x => x.NamespaceName)]);
    }

    private Task<IEnumerable<GenericSummaryDto>> GetImageSummaryDtos()
    {
        IEnumerable<GenericSummaryDto> imageSummaryDtos = cache.Where(kvp => kvp.Value.Any())
            .SelectMany(kvp => kvp.Value.Select(vr => vr))
            .GroupBy(item => item.Report?.Artifact?.Digest ?? string.Empty)
            .Select(
                group =>
                {
                    string imageRegistry = group.FirstOrDefault()?.Report?.Registry?.Server ?? string.Empty;
                    string imageName = group.FirstOrDefault()?.Report?.Artifact?.Repository ?? string.Empty;
                    string imageTag = group.FirstOrDefault()?.Report?.Artifact?.Tag ?? string.Empty;
                    GenericSummaryDto dto = new()
                    {
                        Name = $"{imageRegistry}/{imageName}:{imageTag}",
                        Count = group.Count(),
                    };
                    return dto;
                })
            .ToList();

        return Task.FromResult(imageSummaryDtos);
    }

    private Task<IEnumerable<GenericByNsSummaryDto>> GetImageOSByNSSummaryDtos()
    {
        List<GenericByNsSummaryDto> vRImageOSesByNSSummaryDtos = cache.Where(kvp => kvp.Value.Any())
            .SelectMany(
                kvp => kvp.Value.Select(
                    vr => new
                    {
                        NamespaceProperty = kvp.Key,
                        OsName = vr.Report?.Os?.Name ?? string.Empty,
                        Os = vr.Report?.Os?.Family ?? string.Empty,
                    }))
            .GroupBy(item => item.NamespaceProperty)
            .Select(
                group =>
                {
                    GenericByNsSummaryDto dto = new()
                    {
                        NamespaceName = group.Key,
                        TotalCount = group.Count(),
                        DistinctCount = group.Select(item => item.OsName + item.Os).Distinct().Count(),
                        IsTotal = false,
                    };
                    return dto;
                })
            .ToList();
        var globalStatistics = cache.Where(kvp => kvp.Value.Any())
            .SelectMany(
                kvp => kvp.Value.Select(
                    vr => new
                    {
                        OsName = vr.Report?.Os?.Name ?? string.Empty,
                        Os = vr.Report?.Os?.Family ?? string.Empty,
                    }))
            .ToArray();
        GenericByNsSummaryDto globalDto = new()
        {
            NamespaceName = string.Empty,
            TotalCount = globalStatistics.Count(),
            DistinctCount = globalStatistics.Select(item => item.OsName + item.Os).Distinct().Count(),
            IsTotal = true,
        };
        vRImageOSesByNSSummaryDtos.Add(globalDto);

        return Task.FromResult<IEnumerable<GenericByNsSummaryDto>>(
            [.. vRImageOSesByNSSummaryDtos.OrderBy(x => x.NamespaceName)]);
    }

    private Task<IEnumerable<GenericSummaryDto>> GetImageOSSummaryDtos()
    {
        IEnumerable<GenericSummaryDto> imageOSSummaryDtos = cache.Where(kvp => kvp.Value.Any())
            .SelectMany(
                kvp => kvp.Value.Select(
                    vr => $"{vr.Report?.Os?.Family ?? string.Empty} - {vr.Report?.Os?.Name ?? string.Empty}"))
            .GroupBy(image => image)
            .Select(
                group =>
                {
                    GenericSummaryDto dto = new() { Name = group.Key, Count = group.Count() };
                    return dto;
                });

        return Task.FromResult(imageOSSummaryDtos);
    }

    private Task<IEnumerable<GenericByNsSummaryDto>> GetImageEOSLByNsSummaryDtos()
    {
        List<GenericByNsSummaryDto> imageEOSLByNsSummaryDtos = cache.Where(kvp => kvp.Value.Any())
            .SelectMany(
                kvp => kvp.Value.Where(vr => vr.Report?.Os?.Eosl ?? false)
                    .Select(
                        vr => new
                        {
                            NamespaceName = kvp.Key,
                            OsFullName =
                                (vr.Report?.Os?.Name ?? string.Empty) + (vr.Report?.Os?.Family ?? string.Empty),
                        }))
            .GroupBy(item => item.NamespaceName)
            .Select(
                group =>
                {
                    GenericByNsSummaryDto dto = new()
                    {
                        NamespaceName = group.Key,
                        TotalCount = group.Count(),
                        DistinctCount = group.Select(item => item).Distinct().Count(),
                        IsTotal = false,
                    };
                    return dto;
                })
            .ToList();
        var globalStatistics = cache.Where(kvp => kvp.Value.Any())
            .SelectMany(
                kvp => kvp.Value.Where(vr => vr.Report?.Os?.Eosl ?? false)
                    .Select(
                        vr => new
                        {
                            NamespaceName = kvp.Key,
                            OsFullName = (vr.Report?.Os?.Name ?? string.Empty) +
                                         (vr.Report?.Os?.Family ?? string.Empty),
                        }))
            .ToArray();
        GenericByNsSummaryDto globalDto = new()
        {
            NamespaceName = string.Empty,
            TotalCount = globalStatistics.Count(),
            DistinctCount = globalStatistics.Select(x => x.OsFullName).Distinct().Count(),
            IsTotal = true,
        };
        imageEOSLByNsSummaryDtos.Add(globalDto);

        return Task.FromResult<IEnumerable<GenericByNsSummaryDto>>(
            [.. imageEOSLByNsSummaryDtos.OrderBy(x => x.NamespaceName)]);
    }

    private Task<IEnumerable<GenericSummaryDto>> GetImageEOSLSummaryDtos()
    {
        IEnumerable<GenericSummaryDto> imageEOSLSummaryDtos = cache.Where(kvp => kvp.Value.Any())
            .SelectMany(
                kvp => kvp.Value.Where(vr => vr.Report?.Os?.Eosl ?? false)
                    .Select(vr => $"{vr.Report?.Os?.Family ?? string.Empty} - {vr.Report?.Os?.Name ?? string.Empty}"))
            .GroupBy(item => item)
            .Select(
                group =>
                {
                    GenericSummaryDto dto = new() { Name = group.Key, Count = group.Count() };
                    return dto;
                });

        return Task.FromResult(imageEOSLSummaryDtos);
    }
}
