using TrivyOperator.Dashboard.Domain.Trivy.ClusterVulnerabilityReport;

namespace TrivyOperator.Dashboard.Application.Models;

public class ClusterVulnerabilityReportDto
{
    public Guid Uid { get; init; } = Guid.NewGuid();
    public string ResourceName { get; init; } = string.Empty;
    public string? ResourceNamespace { get; init; }
    public string ResourceKind { get; init; } = string.Empty;
    public string ResourceContainerName { get; init; } = string.Empty;
    public string ImageName { get; init; } = string.Empty;
    public string ImageTag { get; init; } = string.Empty;
    public string ImageRepository { get; init; } = string.Empty;
    public string ImageOsFamily { get; init; } = string.Empty;
    public string ImageOsName { get; init; } = string.Empty;
    public bool? ImageEosl { get; init; }
    public long CriticalCount { get; init; }
    public long HighCount { get; init; }
    public long MediumCount { get; init; }
    public long LowCount { get; init; }
    public long UnknownCount { get; init; }
    public long NoneCount { get; init; } = 0;
    public ClusterVulnerabilityReportDetailDto[] Details { get; set; } = [];
}

public class ClusterVulnerabilityReportDetailDto
{
    public Guid Id { get; init; } = Guid.NewGuid();
    public string FixedVersion { get; init; } = string.Empty;
    public string InstalledVersion { get; init; } = string.Empty;
    public DateTime? LastModifiedDate { get; init; }
    public Uri? PrimaryLink { get; init; }
    public DateTime? PublishedDate { get; set; }
    public string Resource { get; set; } = string.Empty;
    public float Score { get; set; }
    public int SeverityId { get; set; }
    public string Target { get; set; } = string.Empty;
    public string Title { get; set; } = string.Empty;
    public string VulnerabilityId { get; set; } = string.Empty;
}

public class ClusterVulnerabilityReportDenormalizedDto
{
    public string ResourceName { get; init; } = string.Empty;
    public string? ResourceNamespace { get; init; }
    public string ResourceKind { get; init; } = string.Empty;
    public string ResourceContainerName { get; init; } = string.Empty;
    public string ImageName { get; init; } = string.Empty;
    public string ImageTag { get; init; } = string.Empty;
    public string ImageRepository { get; init; } = string.Empty;
    public string ImageOsFamily { get; init; } = string.Empty;
    public string ImageOsName { get; init; } = string.Empty;
    public bool? ImageEosl { get; init; }


    public string FixedVersion { get; init; } = string.Empty;
    public string InstalledVersion { get; init; } = string.Empty;
    public DateTime? LastModifiedDate { get; init; }
    public Uri? PrimaryLink { get; init; }
    public DateTime? PublishedDate { get; set; }
    public string Resource { get; set; } = string.Empty;
    public float Score { get; set; }
    public int SeverityId { get; set; }
    public string Target { get; set; } = string.Empty;
    public string Title { get; set; } = string.Empty;
    public string VulnerabilityId { get; set; } = string.Empty;
}

public static class ClusterVulnerabilityReportCrExtensions
{
    public static ClusterVulnerabilityReportDto ToClusterVulnerabilityReportDto(
        this ClusterVulnerabilityReportCr clusterVulnerabilityReportCr)
    {
        List<ClusterVulnerabilityReportDetailDto> clusterVulnerabilityReportDetailDtos = [];
        foreach (Vulnerability vulnerability in clusterVulnerabilityReportCr.Report?.Vulnerabilities ?? [])
        {
            ClusterVulnerabilityReportDetailDto clustervulnerabilityReportDetailDto = new()
            {
                FixedVersion = vulnerability.FixedVersion,
                InstalledVersion = vulnerability.InstalledVersion,
                LastModifiedDate = vulnerability.LastModifiedDate,
                PrimaryLink = vulnerability.PrimaryLink,
                PublishedDate = vulnerability.PublishedDate,
                Resource = vulnerability.Resource,
                Score = vulnerability.Score,
                SeverityId = (int)vulnerability.Severity,
                Target = vulnerability.Target,
                Title = vulnerability.Title,
                VulnerabilityId = vulnerability.VulnerabilityId,
            };
            clusterVulnerabilityReportDetailDtos.Add(clustervulnerabilityReportDetailDto);
        }

        ClusterVulnerabilityReportDto clusterVulnerabilityReportDto = new()
        {
            Uid = new Guid(clusterVulnerabilityReportCr.Metadata.Uid ?? string.Empty),
            ResourceName =
                clusterVulnerabilityReportCr.Metadata.Labels != null &&
                clusterVulnerabilityReportCr.Metadata.Labels.TryGetValue(
                    "trivy-operator.resource.name",
                    out string? resourceName)
                    ? resourceName
                    : string.Empty,
            ResourceNamespace =
                clusterVulnerabilityReportCr.Metadata.Labels != null &&
                clusterVulnerabilityReportCr.Metadata.Labels.TryGetValue(
                    "trivy-operator.resource.namespace",
                    out string? resourceNamespace)
                    ? resourceNamespace
                    : string.Empty,
            ResourceKind =
                clusterVulnerabilityReportCr.Metadata.Labels != null &&
                clusterVulnerabilityReportCr.Metadata.Labels.TryGetValue(
                    "trivy-operator.resource.kind",
                    out string? resourceKind)
                    ? resourceKind
                    : string.Empty,
            ResourceContainerName =
                clusterVulnerabilityReportCr.Metadata.Labels != null &&
                clusterVulnerabilityReportCr.Metadata.Labels.TryGetValue(
                    "trivy-operator.container.name",
                    out string? resourceContainerName)
                    ? resourceContainerName
                    : string.Empty,
            ImageName = clusterVulnerabilityReportCr.Report?.Artifact?.Repository ?? string.Empty,
            ImageTag = clusterVulnerabilityReportCr.Report?.Artifact?.Tag ?? string.Empty,
            ImageRepository = clusterVulnerabilityReportCr.Report?.Registry?.Server ?? string.Empty,
            ImageOsFamily = clusterVulnerabilityReportCr.Report?.Os?.Family ?? string.Empty,
            ImageOsName = clusterVulnerabilityReportCr.Report?.Os?.Name ?? string.Empty,
            ImageEosl = clusterVulnerabilityReportCr.Report?.Os?.Eosl,
            CriticalCount = clusterVulnerabilityReportCr.Report?.Summary?.CriticalCount ?? 0,
            HighCount = clusterVulnerabilityReportCr.Report?.Summary?.HighCount ?? 0,
            MediumCount = clusterVulnerabilityReportCr.Report?.Summary?.MediumCount ?? 0,
            LowCount = clusterVulnerabilityReportCr.Report?.Summary?.LowCount ?? 0,
            UnknownCount = clusterVulnerabilityReportCr.Report?.Summary?.UnknownCount ?? 0,
            Details = [.. clusterVulnerabilityReportDetailDtos],
        };

        return clusterVulnerabilityReportDto;
    }

    public static IList<ClusterVulnerabilityReportDenormalizedDto> ToClusterVulnerabilityReportDenormalizedDtos(
        this ClusterVulnerabilityReportCr clusterVulnerabilityReportCr)
    {
        List<ClusterVulnerabilityReportDenormalizedDto> clusterVulnerabilityReportDenormalizedDtos = [];

        string resourceName =
            clusterVulnerabilityReportCr.Metadata.Labels != null &&
            clusterVulnerabilityReportCr.Metadata.Labels.TryGetValue(
                "trivy-operator.resource.name",
                out string? tryResourceName)
                ? tryResourceName
                : string.Empty;
        string resourceNamespace =
            clusterVulnerabilityReportCr.Metadata.Labels != null &&
            clusterVulnerabilityReportCr.Metadata.Labels.TryGetValue(
                "trivy-operator.resource.namespace",
                out string? tryResourceNamespace)
                ? tryResourceNamespace
                : string.Empty;
        string resourceKind =
            clusterVulnerabilityReportCr.Metadata.Labels != null &&
            clusterVulnerabilityReportCr.Metadata.Labels.TryGetValue(
                "trivy-operator.resource.kind",
                out string? tryResourceKind)
                ? tryResourceKind
                : string.Empty;
        string resourceContainerName =
            clusterVulnerabilityReportCr.Metadata.Labels != null &&
            clusterVulnerabilityReportCr.Metadata.Labels.TryGetValue(
                "trivy-operator.container.name",
                out string? tryResourceContainerName)
                ? tryResourceContainerName
                : string.Empty;
        string imageName = clusterVulnerabilityReportCr.Report?.Artifact?.Repository ?? string.Empty;
        string imageTag = clusterVulnerabilityReportCr.Report?.Artifact?.Tag ?? string.Empty;
        string imageRepository = clusterVulnerabilityReportCr.Report?.Registry?.Server ?? string.Empty;
        string imageOsFamily = clusterVulnerabilityReportCr.Report?.Os?.Family ?? string.Empty;
        string imageOsName = clusterVulnerabilityReportCr.Report?.Os?.Name ?? string.Empty;
        bool? imageEosl = clusterVulnerabilityReportCr.Report?.Os?.Eosl;

        foreach (Vulnerability vulnerability in clusterVulnerabilityReportCr.Report?.Vulnerabilities ?? [])
        {
            ClusterVulnerabilityReportDenormalizedDto clustervulnerabilityReportDenormalizedDto = new()
            {
                ResourceName = resourceName,
                ResourceNamespace = resourceNamespace,
                ResourceKind = resourceKind,
                ResourceContainerName = resourceContainerName,
                ImageName = imageName,
                ImageTag = imageTag,
                ImageRepository = imageRepository,
                ImageOsFamily = imageOsFamily,
                ImageOsName = imageOsName,
                ImageEosl = imageEosl,
                FixedVersion = vulnerability.FixedVersion,
                InstalledVersion = vulnerability.InstalledVersion,
                LastModifiedDate = vulnerability.LastModifiedDate,
                PrimaryLink = vulnerability.PrimaryLink,
                PublishedDate = vulnerability.PublishedDate,
                Resource = vulnerability.Resource,
                Score = vulnerability.Score,
                SeverityId = (int)vulnerability.Severity,
                Target = vulnerability.Target,
                Title = vulnerability.Title,
                VulnerabilityId = vulnerability.VulnerabilityId,
            };
            clusterVulnerabilityReportDenormalizedDtos.Add(clustervulnerabilityReportDenormalizedDto);
        }

        return clusterVulnerabilityReportDenormalizedDtos;
    }
}
